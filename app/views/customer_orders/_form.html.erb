<%# Customer Order Form with Autocomplete - app/views/customer_orders/_form.html.erb %>
<%= form_with model: customer_order, local: true, class: "space-y-6" do |form| %>
  <% if customer_order.errors.any? %>
    <div class="bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(customer_order.errors.count, "error") %> prohibited this customer order from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc list-inside space-y-1">
              <% customer_order.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Customer Order Details</h3>

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      <!-- Customer Selection with Autocomplete -->
      <div>
        <%= form.label :customer_id, "Customer", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <div class="relative">
          <!-- Hidden field to store the selected customer ID -->
          <%= form.hidden_field :customer_id, id: "customer_id_hidden" %>

          <!-- Autocomplete input field -->
          <input type="text"
                 id="customer_autocomplete"
                 placeholder="Start typing customer name..."
                 autocomplete="off"
                 value="<%= customer_order.customer&.name %>"
                 class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                 required>

          <!-- Dropdown for autocomplete results -->
          <div id="customer_dropdown"
               class="absolute z-50 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-60 overflow-y-auto hidden">
            <!-- Results will be populated here by JavaScript -->
          </div>

          <!-- Loading indicator -->
          <div id="customer_loading"
               class="absolute right-3 top-3 hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
          </div>
        </div>
        <p class="mt-1 text-xs text-gray-500">
          Start typing to search for customers synced from Xero
        </p>
      </div>

      <!-- Order Number -->
      <div>
        <%= form.label :number, "Order Number", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :number,
            placeholder: "Customer PO number or job reference",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
            required: true %>
      </div>

      <!-- Date Received -->
      <div>
        <%= form.label :date_received, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.date_field :date_received,
            value: customer_order.date_received&.strftime("%Y-%m-%d") || Date.current.strftime("%Y-%m-%d"),
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
            required: true %>
      </div>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="flex justify-end space-x-3">
    <%= link_to "Cancel", customer_order.persisted? ? customer_order : customer_orders_path,
        class: "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded" %>
    <%= form.submit customer_order.persisted? ? "Update Customer Order" : "Create Customer Order",
        class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
  </div>
<% end %>

<!-- JavaScript for Autocomplete - Using same defensive pattern as parts form -->
<script>
// Wait and retry approach like parts form
function initializeCustomerAutocomplete() {
  const autocompleteInput = document.getElementById('customer_autocomplete');
  const customerIdHidden = document.getElementById('customer_id_hidden');
  const dropdown = document.getElementById('customer_dropdown');
  const loadingIndicator = document.getElementById('customer_loading');

  if (!autocompleteInput || !customerIdHidden || !dropdown) {
    console.log('Customer elements not ready yet, retrying...');
    setTimeout(initializeCustomerAutocomplete, 100);
    return;
  }

  console.log('Customer autocomplete initialized');

  let searchTimeout;
  let currentRequest;

  autocompleteInput.addEventListener('input', function() {
    console.log('Input event triggered, value:', this.value);

    const query = this.value.trim();
    clearTimeout(searchTimeout);

    if (currentRequest) {
      currentRequest.abort();
    }

    if (query.length < 2) {
      dropdown.classList.add('hidden');
      customerIdHidden.value = '';
      return;
    }

    if (loadingIndicator) {
      loadingIndicator.classList.remove('hidden');
    }

    searchTimeout = setTimeout(() => {
      console.log('Searching for:', query);
      searchCustomers(query);
    }, 300);
  });

  function searchCustomers(query) {
    currentRequest = new AbortController();

    fetch(`/customer_orders/search_customers?q=${encodeURIComponent(query)}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      signal: currentRequest.signal
    })
    .then(response => {
      console.log('Response received:', response.status);
      return response.json();
    })
    .then(data => {
      console.log('Search results:', data);

      if (loadingIndicator) {
        loadingIndicator.classList.add('hidden');
      }

      displayResults(data);
    })
    .catch(error => {
      if (loadingIndicator) {
        loadingIndicator.classList.add('hidden');
      }

      if (error.name !== 'AbortError') {
        console.error('Search error:', error);
      }
    });
  }

  function displayResults(customers) {
    dropdown.innerHTML = '';

    if (customers.length === 0) {
      dropdown.innerHTML = '<div class="px-4 py-3 text-sm text-gray-500">No customers found.</div>';
    } else {
      customers.forEach(customer => {
        const item = document.createElement('div');
        item.className = 'dropdown-item px-4 py-3 cursor-pointer hover:bg-blue-50 text-sm border-b border-gray-100 last:border-b-0';
        item.textContent = customer.name;

        item.addEventListener('click', function() {
          console.log('Selected customer:', customer.name);
          customerIdHidden.value = customer.id;
          autocompleteInput.value = customer.name;
          dropdown.classList.add('hidden');

          // Visual feedback
          autocompleteInput.style.borderColor = '#10b981';
          setTimeout(() => {
            autocompleteInput.style.borderColor = '';
          }, 1000);
        });

        dropdown.appendChild(item);
      });
    }

    dropdown.classList.remove('hidden');
  }

  // Click outside to close
  document.addEventListener('click', function(event) {
    if (!autocompleteInput.contains(event.target) && !dropdown.contains(event.target)) {
      dropdown.classList.add('hidden');
    }
  });
}

// Start initialization with same pattern as parts form
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeCustomerAutocomplete);
} else {
  initializeCustomerAutocomplete();
}
</script>

<style>
.dropdown-item:hover {
  background-color: #dbeafe !important;
}

#customer_loading {
  pointer-events: none;
}
</style>
