<%# app/views/parts/_form.html.erb - Complete form with modal-based manual operation management and copy from existing part %>
<%= form_with model: part, local: true, class: "space-y-6",
    data: {
      controller: "parts-form",
      parts_form_filter_path_value: filter_operations_parts_path,
      parts_form_details_path_value: operation_details_parts_path,
      parts_form_preview_path_value: preview_operations_parts_path,
      parts_form_csrf_token_value: form_authenticity_token
    } do |form| %>

  <% if part.errors.any? %>
    <div class="bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(part.errors.count, "error") %> prohibited this part from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc list-inside space-y-1">
              <% part.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Hidden field for manual mode switch -->
  <%= hidden_field_tag :switch_to_manual, false, id: "switch_to_manual_field" %>

  <!-- Part Details Section -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Part Details</h3>

    <!-- Copy from Existing Part Section (only for new parts) -->
    <% unless part.persisted? %>
      <div class="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <h4 class="text-md font-medium text-blue-900 mb-3">Copy from Existing Part (Optional)</h4>
        <div class="relative">
          <input type="text"
                id="copy_from_part_autocomplete"
                placeholder="Start typing to search for existing parts..."
                autocomplete="off"
                class="w-full border border-blue-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">

          <!-- Dropdown for autocomplete results -->
          <div id="copy_from_part_dropdown"
              class="absolute z-50 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-60 overflow-y-auto hidden">
            <!-- Results will be populated here by JavaScript -->
          </div>

          <!-- Loading indicator -->
          <div id="copy_from_part_loading"
              class="absolute right-3 top-3 hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
          </div>
        </div>
        <p class="mt-2 text-xs text-blue-600">
          Selecting a part will copy its operations and switch to manual editing mode
        </p>
      </div>
    <% end %>

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      <!-- Customer Selection -->
      <div>
        <%= form.label :customer_id, "Customer", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <% if part.persisted? %>
          <!-- Show read-only customer name for existing parts -->
          <div class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 bg-gray-50 text-gray-500 sm:text-sm">
            <%= part.customer&.name %>
          </div>
          <%= form.hidden_field :customer_id %>
          <p class="mt-1 text-xs text-gray-500">Customer cannot be changed on existing parts</p>
        <% else %>
          <!-- Autocomplete for new parts -->
          <div class="relative">
            <!-- Hidden field to store the selected customer ID -->
            <%= form.hidden_field :customer_id, id: "part_customer_id_hidden" %>

            <!-- Autocomplete input field -->
            <input type="text"
                  id="part_customer_autocomplete"
                  placeholder="Start typing customer name..."
                  autocomplete="off"
                  value="<%= part.customer&.name %>"
                  class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required>

            <!-- Dropdown for autocomplete results -->
            <div id="part_customer_dropdown"
                class="absolute z-50 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-60 overflow-y-auto hidden">
              <!-- Results will be populated here by JavaScript -->
            </div>

            <!-- Loading indicator -->
            <div id="part_customer_loading"
                class="absolute right-3 top-3 hidden">
              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
            </div>
          </div>
          <p class="mt-1 text-xs text-gray-500">
            Start typing to search for customers synced from Xero
          </p>
        <% end %>
      </div>

      <!-- Part Number -->
      <div>
        <%= form.label :part_number, "Part Number", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_number,
            placeholder: "Enter part number",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono",
            required: true %>
        <p class="mt-1 text-xs text-gray-500">Will be automatically converted to uppercase</p>
      </div>

      <!-- Part Description -->
      <div>
        <%= form.label :description, "Part Description", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :description,
            placeholder: "Enter part description",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
        <p class="mt-1 text-xs text-gray-500">Optional description of the part or component</p>
      </div>

      <!-- Part Issue -->
      <div>
        <%= form.label :part_issue, "Part Issue", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_issue,
            value: part.part_issue.presence || 'A',
            placeholder: "A",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono",
            required: true %>
        <p class="mt-1 text-xs text-gray-500">Defaults to 'A' if not specified</p>
      </div>

      <!-- Material -->
      <div>
        <%= form.label :material, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :material,
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
      </div>

      <!-- Specified Thicknesses -->
      <div>
        <%= form.label :specified_thicknesses, "Specified thickness(es) and tolerance(s)", class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :specified_thicknesses,
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
        <p class="mt-1 text-xs text-gray-500">e.g., 25±5μm, 10-15μm, 20μm nominal</p>
      </div>

      <div>
        <%= form.label :specification, "Specifications", class: "block text-sm font-medium text-gray-700 mb-1" %>

        <!-- Parse existing specifications back into array for pre-selection -->
        <% existing_specs = part.specification.present? ? part.specification.scan(/\[([^\]]+)\]/).flatten : [] %>

        <div class="mt-1 space-y-2 max-h-48 overflow-y-auto border border-gray-300 rounded-md p-3 bg-white">
          <% @specification_presets.each do |preset| %>
            <label class="flex items-start">
              <%= check_box_tag "part[specification][]",
                  "[#{preset.content}]",
                  existing_specs.include?(preset.content),
                  {
                    class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-offset-0 focus:ring-blue-200 focus:ring-opacity-50 mt-0.5 flex-shrink-0"
                  } %>
              <span class="ml-2 text-sm text-gray-900 leading-tight">
                <strong><%= preset.name %></strong>
                <br>
                <span class="text-gray-600 text-xs"><%= preset.content %></span>
              </span>
            </label>
          <% end %>
        </div>

        <!-- Hidden field to ensure empty array is sent when nothing is selected -->
        <%= hidden_field_tag "part[specification][]", "", id: "specification_placeholder" %>

        <p class="mt-1 text-xs text-gray-500">Select one or more specifications. They will be combined as [Spec 1][Spec 2][Spec 3]</p>
      </div>

      <!-- Aerospace/Defense Application (only for unlocked parts) -->
      <% unless part.locked_for_editing? %>
        <div>
          <%= label_tag "part[customisation_data][operation_selection][aerospace_defense]", "Application Type", class: "block text-sm font-medium text-gray-700 mb-1" %>
          <div class="mt-1">
            <%= check_box_tag "part[customisation_data][operation_selection][aerospace_defense]",
                true,
                part.aerospace_defense?,
                {
                  class: "rounded border-gray-300 text-red-600 shadow-sm focus:border-red-300 focus:ring focus:ring-offset-0 focus:ring-red-200 focus:ring-opacity-50",
                  data: { parts_form_target: "aerospaceDefenseCheckbox" }
                } %>
            <%= label_tag "part[customisation_data][operation_selection][aerospace_defense]",
                "Aerospace/Defence",
                class: "ml-2 text-sm text-gray-900" %>
          </div>
          <p class="mt-1 text-xs text-gray-500">Auto-inserts foil verification, water break test, and OCV operations</p>
        </div>
      <% end %>

      <!-- Enabled Status (for editing) -->
      <% if part.persisted? %>
        <div>
          <%= form.label :enabled, class: "block text-sm font-medium text-gray-700 mb-1" %>
          <div class="mt-1">
            <%= form.check_box :enabled, class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-offset-0 focus:ring-blue-200 focus:ring-opacity-50" %>
            <%= form.label :enabled, "Part is enabled", class: "ml-2 text-sm text-gray-900" %>
          </div>
        </div>
      <% end %>
    </div>

    <!-- Special Instructions (moved inside Part Details) -->
    <div class="mt-6">
      <h4 class="text-md font-medium text-gray-900 mb-3">Special Instructions</h4>
      <%= form.text_area :special_instructions,
          placeholder: "Any special handling or processing instructions...",
          rows: 3,
          class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
      <p class="mt-1 text-xs text-gray-500">Optional special instructions or notes</p>
    </div>
  </div>

  <% if part.locked_for_editing? %>
    <!-- Locked Operations Editing Mode with Modal-Based Manual Management -->
    <div class="bg-white shadow rounded-lg p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Manual Operations Mode</h3>
        <span class="inline-flex px-3 py-1 text-xs font-semibold rounded-full bg-orange-100 text-orange-800">
          Operations Locked for Editing
        </span>
      </div>

      <p class="text-sm text-gray-600 mb-6">Operations are now in manual editing mode. You can customize the text, insert new operations between existing ones, reorder, or delete operations below.</p>

      <div class="space-y-1" id="operations-container">
        <% part.locked_operations.each_with_index do |operation, index| %>
          <!-- Add operation button before each operation (except first) -->
          <% unless index == 0 %>
            <div class="flex justify-center py-2">
              <button type="button" class="add-operation-btn bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-lg text-sm border border-blue-300 transition-colors"
                      data-insert-position="<%= operation['position'] %>">
                + Add Operation Here
              </button>
            </div>
          <% end %>

          <!-- Existing operation item -->
          <div class="border border-gray-200 rounded-lg p-4 bg-gray-50 operation-item" data-position="<%= operation["position"] %>">
            <div class="flex justify-between items-start mb-3">
              <div class="flex items-center space-x-3">
                <h4 class="font-medium text-gray-900">Operation <%= operation["position"] %>: <%= operation["display_name"] %></h4>
                <% if operation["vat_numbers"]&.any? %>
                  <span class="text-xs text-gray-500">Vats <%= operation["vat_numbers"].join(', ') %></span>
                <% end %>
              </div>

              <div class="flex items-center space-x-2">
                <!-- Reorder buttons -->
                <% unless index == 0 %>
                  <button type="button" class="reorder-up-btn text-blue-600 hover:text-blue-800 text-sm font-medium"
                          data-position="<%= operation["position"] %>"
                          title="Move up">
                    ↑
                  </button>
                <% end %>

                <% unless index == part.locked_operations.length - 1 %>
                  <button type="button" class="reorder-down-btn text-blue-600 hover:text-blue-800 text-sm font-medium"
                          data-position="<%= operation["position"] %>"
                          title="Move down">
                    ↓
                  </button>
                <% end %>

                <!-- Delete operation button -->
                <button type="button" class="delete-operation-btn text-red-600 hover:text-red-800 text-xl font-bold"
                        data-position="<%= operation["position"] %>"
                        title="Delete this operation">
                  ×
                </button>
              </div>
            </div>

            <%= text_area_tag "locked_operations[#{operation["position"]}]",
                operation["operation_text"],
                {
                  rows: 3,
                  autocomplete: "off",
                  class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
                  placeholder: "Enter operation text..."
                } %>

            <% if operation["specifications"].present? %>
              <p class="mt-2 text-xs text-purple-600">
                <strong>Specifications:</strong> <%= operation["specifications"] %>
              </p>
            <% end %>

            <div class="flex flex-wrap gap-2 mt-2 text-xs text-gray-500">
              <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded">Type: <%= operation["process_type"]&.humanize %></span>
              <% if operation["target_thickness"] && operation["target_thickness"] > 0 %>
                <span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded">Target: <%= operation["target_thickness"] %>μm</span>
              <% end %>
              <% if operation["auto_inserted"] %>
                <span class="bg-gray-100 text-gray-800 px-2 py-1 rounded">Auto-inserted</span>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Add operation button at end -->
        <div class="flex justify-center py-2">
          <button type="button" class="add-operation-btn bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-lg text-sm border border-blue-300 transition-colors"
                  data-insert-position="<%= part.locked_operations.length + 1 %>">
            + Add Operation at End
          </button>
        </div>
      </div>

      <!-- Modal will be injected here by the Stimulus controller -->
    </div>

  <% else %>
    <!-- Treatment Selection Section (Unlocked Mode) -->
    <div class="bg-white shadow rounded-lg p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Processing Instructions</h3>
      <p class="text-sm text-gray-600 mb-4">Please select main treatments in chronological order.</p>

      <!-- Treatment Type Buttons - Updated to include Strip Only -->
      <div class="grid grid-cols-2 gap-3 mb-6 sm:grid-cols-3 lg:grid-cols-6">
        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-blue-500 transition-colors text-sm" data-treatment="standard_anodising">
          <span>Standard</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>

        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-purple-500 transition-colors text-sm" data-treatment="hard_anodising">
          <span>Hard</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>

        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-green-500 transition-colors text-sm" data-treatment="chromic_anodising">
          <span>Chromic</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>

        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-orange-500 transition-colors text-sm" data-treatment="chemical_conversion">
          <span>Chemical Conv.</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>

        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-indigo-500 transition-colors text-sm" data-treatment="electroless_nickel_plating">
          <span>ENP</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>

        <button type="button" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-red-500 transition-colors text-sm" data-treatment="stripping_only">
          <span>Strip Only</span>
          <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
        </button>
      </div>

      <!-- ENP Options Container -->
      <div data-parts-form-target="enpOptionsContainer" class="mb-6" style="display: none;">
        <h4 class="text-md font-medium text-gray-900 mb-4">ENP Options</h4>

        <!-- ENP Pre-Heat Treatment Selection -->
        <div class="mb-4">
          <label for="enp_pre_heat_treatment_select" class="block text-sm font-medium text-gray-700 mb-2">Pre-Heat Treatment (Optional)</label>
          <select id="enp_pre_heat_treatment_select" data-parts-form-target="enpPreHeatTreatmentSelect" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            <option value="none">No Pre-Heat Treatment</option>
            <option value="ENP_HEAT_TREAT_120_130C_1_3H">120-130°C for 1-3 hours</option>
            <option value="ENP_HEAT_TREAT_120_130C_1_6H">120-130°C for 1-6 hours</option>
            <option value="ENP_HEAT_TREAT_120_130C_2_3H">120-130°C for 2-3 hours</option>
            <option value="ENP_HEAT_TREAT_125C_5C_2H">125±5°C for 2 hours</option>
            <option value="ENP_HEAT_TREAT_140C_10C_8H_MIN">140±10°C for 8h minimum</option>
            <option value="ENP_HEAT_TREAT_140_150C_1_2H">140-150°C for 1-2 hours</option>
            <option value="ENP_HEAT_TREAT_180C_1H">180°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_190C_6H">190±4°C for 6 hours</option>
            <option value="ENP_HEAT_TREAT_190C_14_8H">190±14°C for 8 hours</option>
            <option value="ENP_HEAT_TREAT_200C_8H_MIN">200±10°C for 8h minimum</option>
            <option value="ENP_HEAT_TREAT_232C_1H">232°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_343C_1_5H_AIR_CIRCULATING">343±10°C for 1.5h minimum (Air Circulating)</option>
            <option value="ENP_HEAT_TREAT_350C_1H">350°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_395_405C_1H">395-405°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_550C_1H">550°C for 1 hour</option>
            <option value="ENP_POST_HEAT_TREAT_140C_24H">Post: 140±10°C for 24 hours</option>
            <option value="ENP_BAKE_177_204C_6H">Bake: 177-204°C for 6h</option>
          </select>
          <p class="mt-1 text-xs text-gray-500">Pre-heat treatment occurs before jigging operations</p>
        </div>

        <!-- ENP Post-Heat Treatment Selection -->
        <div class="mb-4">
          <label for="enp_heat_treatment_select" class="block text-sm font-medium text-gray-700 mb-2">Post-Heat Treatment (Optional)</label>
          <select id="enp_heat_treatment_select" data-parts-form-target="enpHeatTreatmentSelect" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
            <option value="none">No Post-Heat Treatment</option>
            <option value="ENP_HEAT_TREAT_120_130C_1_3H">120-130°C for 1-3 hours</option>
            <option value="ENP_HEAT_TREAT_120_130C_1_6H">120-130°C for 1-6 hours</option>
            <option value="ENP_HEAT_TREAT_120_130C_2_3H">120-130°C for 2-3 hours</option>
            <option value="ENP_HEAT_TREAT_125C_5C_2H">125±5°C for 2 hours</option>
            <option value="ENP_HEAT_TREAT_140C_10C_8H_MIN">140±10°C for 8h minimum</option>
            <option value="ENP_HEAT_TREAT_140_150C_1_2H">140-150°C for 1-2 hours</option>
            <option value="ENP_HEAT_TREAT_180C_1H">180°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_190C_6H">190±4°C for 6 hours</option>
            <option value="ENP_HEAT_TREAT_190C_14_8H">190±14°C for 8 hours</option>
            <option value="ENP_HEAT_TREAT_200C_8H_MIN">200±10°C for 8h minimum</option>
            <option value="ENP_HEAT_TREAT_232C_1H">232°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_343C_1_5H_AIR_CIRCULATING">343±10°C for 1.5h minimum (Air Circulating)</option>
            <option value="ENP_HEAT_TREAT_350C_1H">350°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_395_405C_1H">395-405°C for 1 hour</option>
            <option value="ENP_HEAT_TREAT_550C_1H">550°C for 1 hour</option>
            <option value="ENP_POST_HEAT_TREAT_140C_24H">Post: 140±10°C for 24 hours</option>
            <option value="ENP_BAKE_177_204C_6H">Bake: 177-204°C for 6h</option>
          </select>
          <p class="mt-1 text-xs text-gray-500">Post-heat treatment occurs after unjig but before ENP Strip/Mask operations</p>
        </div>

        <!-- ENP Strip Type Selection -->
        <div class="mb-4">
          <h5 class="text-sm font-medium text-gray-700 mb-2">Strip Type</h5>
          <div class="flex space-x-4">
            <label class="flex items-center">
              <input type="radio" name="enp_strip_type" value="nitric" checked class="form-radio text-indigo-600" data-parts-form-target="enpStripTypeRadio">
              <span class="ml-2 text-sm text-gray-700">Nitric Acid (Standard)</span>
            </label>
            <label class="flex items-center">
              <input type="radio" name="enp_strip_type" value="metex_dekote" class="form-radio text-indigo-600" data-parts-form-target="enpStripTypeRadio">
              <span class="ml-2 text-sm text-gray-700">Metex Dekote (Ferrous)</span>
            </label>
          </div>
        </div>

        <!-- ENP Strip/Mask Operations -->
        <div>
          <label class="flex items-center">
            <input type="checkbox" data-parts-form-target="enpStripMaskCheckbox" class="form-checkbox text-indigo-600">
            <span class="ml-2 text-sm text-gray-700">Add ENP Strip/Mask Operations</span>
          </label>
          <p class="mt-1 text-xs text-gray-500">Independent from heat treatments - can be selected separately</p>
        </div>
      </div>

      <!-- Treatment Cards Container -->
      <div data-parts-form-target="treatmentsContainer" class="space-y-4 mb-6">
      </div>

      <!-- Operations Preview -->
      <div class="mt-6">
        <h4 class="text-md font-medium text-gray-900 mb-3">Operations Preview</h4>

        <div data-parts-form-target="selectedContainer" class="space-y-2 min-h-[60px] border border-gray-200 rounded p-3 bg-gray-50">
          <% operations_with_auto_ops = part.respond_to?(:get_operations_with_auto_ops) ? part.get_operations_with_auto_ops : [] %>
          <% if operations_with_auto_ops.any? %>
            <% operations_with_auto_ops.each_with_index do |operation, index| %>
              <% if operation %>
                <% is_auto_inserted = operation.respond_to?(:auto_inserted?) && operation.auto_inserted? %>
                <% is_water_break_test = operation.respond_to?(:water_break_test?) && operation.water_break_test? %>
                <% is_foil_verification = operation.respond_to?(:foil_verification?) && operation.foil_verification? %>
                <% is_dye = operation.respond_to?(:dye?) && operation.dye? %>
                <% is_heat_treatment = operation.respond_to?(:enp_heat_treatment?) && operation.enp_heat_treatment? %>
                <% is_local_treatment = operation.respond_to?(:local_treatment?) && operation.local_treatment? %>
                <% is_stripping = operation.respond_to?(:stripping?) && operation.stripping? %>
                <% bg_color_class = is_auto_inserted ? 'bg-gray-100 border border-gray-300' : 'bg-blue-100 border border-blue-300' %>
                <% bg_color_class = 'bg-red-50 border border-red-200' if is_water_break_test %>
                <% bg_color_class = 'bg-yellow-50 border border-yellow-200' if is_foil_verification %>
                <% bg_color_class = 'bg-purple-50 border border-purple-200' if is_dye %>
                <% bg_color_class = 'bg-orange-50 border border-orange-200' if is_heat_treatment %>
                <% bg_color_class = 'bg-teal-50 border border-teal-200' if is_local_treatment %>
                <% bg_color_class = 'bg-red-100 border border-red-300' if is_stripping %>
                <% text_color_class = is_auto_inserted ? 'italic text-gray-600' : 'text-gray-900' %>
                <% text_color_class = 'text-red-800' if is_water_break_test %>
                <% text_color_class = 'text-yellow-800' if is_foil_verification %>
                <% text_color_class = 'text-purple-800' if is_dye %>
                <% text_color_class = 'text-orange-800' if is_heat_treatment %>
                <% text_color_class = 'text-teal-800' if is_local_treatment %>
                <% text_color_class = 'text-red-900' if is_stripping %>

                <div class="<%= bg_color_class %> rounded px-3 py-2 flex justify-between items-center">
                  <span class="text-sm <%= text_color_class %>">
                    <strong><%= index + 1 %>.</strong>
                    <%= operation.display_name %>: <%= operation.operation_text %>
                    <% if is_auto_inserted %>
                      <span class="text-xs text-gray-500 ml-2">(auto-inserted)</span>
                    <% end %>
                    <% if is_water_break_test %>
                      <span class="text-xs text-red-600 ml-2">(requires manual recording)</span>
                    <% end %>
                    <% if is_foil_verification %>
                      <span class="text-xs text-yellow-600 ml-2">(aerospace/defense verification)</span>
                    <% end %>
                    <% if is_dye %>
                      <span class="text-xs text-purple-600 ml-2">(dye operation)</span>
                    <% end %>
                    <% if is_heat_treatment %>
                      <span class="text-xs text-orange-600 ml-2">(ENP heat treatment)</span>
                    <% end %>
                    <% if is_local_treatment %>
                      <span class="text-xs text-teal-600 ml-2">(local treatment)</span>
                    <% end %>
                    <% if is_stripping %>
                      <span class="text-xs text-red-600 ml-2">(strip-only treatment)</span>
                    <% end %>
                  </span>
                </div>
              <% end %>
            <% end %>
          <% else %>
            <p class="text-gray-500 text-sm">No treatments selected</p>
          <% end %>
        </div>
      </div>

      <!-- Hidden fields for form data -->
      <%= hidden_field_tag "part[customisation_data][operation_selection][treatments]",
          part.operation_selection["treatments"]&.to_json || '[]',
          data: { parts_form_target: "treatmentsField" } %>

      <%= hidden_field_tag "part[customisation_data][operation_selection][selected_enp_pre_heat_treatment]",
          part.selected_enp_pre_heat_treatment || 'none',
          data: { parts_form_target: "enpPreHeatTreatmentField" } %>

      <%= hidden_field_tag "part[customisation_data][operation_selection][selected_enp_heat_treatment]",
          part.selected_enp_heat_treatment || 'none',
          data: { parts_form_target: "enpHeatTreatmentField" } %>

      <%= hidden_field_tag "part[customisation_data][operation_selection][enp_strip_type]",
          'nitric',
          data: { parts_form_target: "enpStripTypeField" } %>

      <%= hidden_field_tag "part[customisation_data][operation_selection][selected_operations]",
          '[]',
          data: { parts_form_target: "enpStripMaskField" } %>

      <%= hidden_field_tag "part[customisation_data][operation_selection][aerospace_defense]",
          part.aerospace_defense? || false,
          data: { parts_form_target: "aerospaceDefenseField" } %>
    </div>
  <% end %>

  <!-- Form Actions -->
  <div class="flex justify-end space-x-3">
    <%= link_to "Cancel", part.persisted? ? part : parts_path,
        class: "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded" %>

    <% if !part.locked_for_editing? %>
      <!-- Switch to Manual Mode Button (disguised submit) -->
      <%= button_tag "Switch to Manual Mode",
          type: "button",
          onclick: "switchToManualMode()",
          class: "bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded mr-3",
          style: "#{'display: none;' if part.persisted?}"
          %>
    <% end %>

    <%= form.submit part.persisted? ? "Update Part" : "Create Part",
        class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
  </div>
<% end %>

<% unless part.locked_for_editing? %>
  <% unless part.persisted? %>
    <script>
    // Customer autocomplete initialization and manual mode function
    function initializeCustomerAutocomplete() {
      const autocompleteInput = document.getElementById('part_customer_autocomplete');
      const customerIdHidden = document.getElementById('part_customer_id_hidden');
      const dropdown = document.getElementById('part_customer_dropdown');
      const loadingIndicator = document.getElementById('part_customer_loading');

      if (!autocompleteInput || !customerIdHidden || !dropdown) {
        setTimeout(initializeCustomerAutocomplete, 100);
        return;
      }

      let searchTimeout;
      let currentRequest;

      autocompleteInput.addEventListener('input', function() {
        const query = this.value.trim();
        clearTimeout(searchTimeout);

        if (currentRequest) {
          currentRequest.abort();
        }

        if (query.length < 2) {
          dropdown.classList.add('hidden');
          customerIdHidden.value = '';
          return;
        }

        if (loadingIndicator) {
          loadingIndicator.classList.remove('hidden');
        }

        searchTimeout = setTimeout(() => {
          searchCustomers(query);
        }, 300);
      });

      function searchCustomers(query) {
        currentRequest = new AbortController();

        fetch(`/customer_orders/search_customers?q=${encodeURIComponent(query)}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          signal: currentRequest.signal
        })
        .then(response => response.json())
        .then(data => {
          if (loadingIndicator) {
            loadingIndicator.classList.add('hidden');
          }
          displayResults(data);
        })
        .catch(error => {
          if (loadingIndicator) {
            loadingIndicator.classList.add('hidden');
          }
          if (error.name !== 'AbortError') {
            console.error('Search error:', error);
          }
        });
      }

      function displayResults(customers) {
        dropdown.innerHTML = '';

        if (customers.length === 0) {
          dropdown.innerHTML = '<div class="px-4 py-3 text-sm text-gray-500">No customers found.</div>';
        } else {
          customers.forEach(customer => {
            const item = document.createElement('div');
            item.className = 'dropdown-item px-4 py-3 cursor-pointer hover:bg-blue-50 text-sm border-b border-gray-100 last:border-b-0';
            item.textContent = customer.name;

            item.addEventListener('click', function() {
              customerIdHidden.value = customer.id;
              autocompleteInput.value = customer.name;
              dropdown.classList.add('hidden');

              autocompleteInput.style.borderColor = '#10b981';
              setTimeout(() => {
                autocompleteInput.style.borderColor = '';
              }, 1000);
            });

            dropdown.appendChild(item);
          });
        }

        dropdown.classList.remove('hidden');
      }

      document.addEventListener('click', function(event) {
        if (!autocompleteInput.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.classList.add('hidden');
        }
      });
    }

    // Copy from Existing Part functionality
    function initializeCopyFromPartAutocomplete() {
      const copyAutocompleteInput = document.getElementById('copy_from_part_autocomplete');
      const copyDropdown = document.getElementById('copy_from_part_dropdown');
      const copyLoadingIndicator = document.getElementById('copy_from_part_loading');

      if (!copyAutocompleteInput || !copyDropdown) {
        return; // Elements don't exist (probably editing existing part)
      }

      let copySearchTimeout;
      let copyCurrentRequest;

      copyAutocompleteInput.addEventListener('input', function() {
        const query = this.value.trim();
        clearTimeout(copySearchTimeout);

        if (copyCurrentRequest) {
          copyCurrentRequest.abort();
        }

        if (query.length < 2) {
          copyDropdown.classList.add('hidden');
          return;
        }

        if (copyLoadingIndicator) {
          copyLoadingIndicator.classList.remove('hidden');
        }

        copySearchTimeout = setTimeout(() => {
          searchAllParts(query);
        }, 300);
      });

      function searchAllParts(query) {
        copyCurrentRequest = new AbortController();

        fetch(`/parts/search_all_parts?q=${encodeURIComponent(query)}`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          signal: copyCurrentRequest.signal
        })
        .then(response => response.json())
        .then(data => {
          if (copyLoadingIndicator) {
            copyLoadingIndicator.classList.add('hidden');
          }
          displayCopyResults(data);
        })
        .catch(error => {
          if (copyLoadingIndicator) {
            copyLoadingIndicator.classList.add('hidden');
          }
          if (error.name !== 'AbortError') {
            console.error('Copy search error:', error);
          }
        });
      }

      function displayCopyResults(parts) {
        copyDropdown.innerHTML = '';

        if (parts.length === 0) {
          copyDropdown.innerHTML = '<div class="px-4 py-3 text-sm text-gray-500">No parts found.</div>';
        } else {
          parts.forEach(part => {
            const item = document.createElement('div');
            item.className = 'dropdown-item px-4 py-3 cursor-pointer hover:bg-blue-50 text-sm border-b border-gray-100 last:border-b-0';

            const partInfo = document.createElement('div');
            partInfo.innerHTML = `
              <div class="font-medium text-gray-900">${part.display_name}</div>
              <div class="text-xs text-gray-500">${part.customer_name}</div>
              <div class="text-xs text-gray-600 mt-1">${part.operations_summary || 'No operations'}</div>
            `;
            item.appendChild(partInfo);

            item.addEventListener('click', function() {
              copyPartOperations(part.id, part.display_name);
              copyAutocompleteInput.value = `Copying from: ${part.display_name} (${part.customer_name})`;
              copyDropdown.classList.add('hidden');
            });

            copyDropdown.appendChild(item);
          });
        }

        copyDropdown.classList.remove('hidden');
      }

      function copyPartOperations(partId, partName) {
        // Show loading state
        copyAutocompleteInput.disabled = true;
        copyAutocompleteInput.style.backgroundColor = '#f9fafb';

        // Fetch part operations
        fetch(`/parts/${partId}/copy_operations`, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Switch to manual mode and populate operations
            switchToManualModeWithOperations(data.operations, partName);
          } else {
            alert('Failed to copy operations: ' + data.error);
            copyAutocompleteInput.disabled = false;
            copyAutocompleteInput.style.backgroundColor = '';
          }
        })
        .catch(error => {
          console.error('Error copying operations:', error);
          alert('An error occurred while copying operations');
          copyAutocompleteInput.disabled = false;
          copyAutocompleteInput.style.backgroundColor = '';
        });
      }

      document.addEventListener('click', function(event) {
        if (!copyAutocompleteInput.contains(event.target) && !copyDropdown.contains(event.target)) {
          copyDropdown.classList.add('hidden');
        }
      });
    }

    function switchToManualModeWithOperations(operations, sourcePart) {
      // Hide the treatment selection section
      const treatmentSection = document.querySelector('.bg-white.shadow.rounded-lg.p-6:last-of-type');
      if (treatmentSection) {
        treatmentSection.style.display = 'none';
      }

      // Create and show manual operations section
      const manualSection = document.createElement('div');
      manualSection.className = 'bg-white shadow rounded-lg p-6';
      manualSection.innerHTML = `
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900">Manual Operations Mode</h3>
          <span class="inline-flex px-3 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
            Copied from: ${sourcePart}
          </span>
        </div>
        <p class="text-sm text-gray-600 mb-6">Operations copied from existing part. You can modify, add, or remove operations below.</p>
        <div class="space-y-1" id="operations-container">
          ${generateOperationsHTML(operations)}
        </div>
      `;

      // Insert the manual section before the form actions
      const formActions = document.querySelector('.flex.justify-end.space-x-3');
      if (formActions) {
        formActions.parentNode.insertBefore(manualSection, formActions);
      }

      // Set the manual mode flag
      document.getElementById('switch_to_manual_field').value = 'true';

      // Hide the "Switch to Manual Mode" button
      const switchButton = document.querySelector('button[onclick="switchToManualMode()"]');
      if (switchButton) {
        switchButton.style.display = 'none';
      }
    }

    function generateOperationsHTML(operations) {
      let html = '';

      operations.forEach((op, index) => {
        // Add operation button before each operation (except first)
        if (index > 0) {
          html += `
            <div class="flex justify-center py-2">
              <button type="button" class="add-operation-btn bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-lg text-sm border border-blue-300 transition-colors"
                      data-insert-position="${op.position}">
                + Add Operation Here
              </button>
            </div>
          `;
        }

        html += `
          <div class="border border-gray-200 rounded-lg p-4 bg-gray-50 operation-item" data-position="${op.position}">
            <div class="flex justify-between items-start mb-3">
              <div class="flex items-center space-x-3">
                <h4 class="font-medium text-gray-900">Operation ${op.position}: ${op.display_name}</h4>
                ${op.vat_numbers && op.vat_numbers.length > 0 ? `<span class="text-xs text-gray-500">Vats ${op.vat_numbers.join(', ')}</span>` : ''}
              </div>
              <div class="flex items-center space-x-2">
                ${index > 0 ? `
                  <button type="button" class="reorder-up-btn text-blue-600 hover:text-blue-800 text-sm font-medium"
                          data-position="${op.position}" title="Move up">↑</button>
                ` : ''}
                ${index < operations.length - 1 ? `
                  <button type="button" class="reorder-down-btn text-blue-600 hover:text-blue-800 text-sm font-medium"
                          data-position="${op.position}" title="Move down">↓</button>
                ` : ''}
                <button type="button" class="delete-operation-btn text-red-600 hover:text-red-800 text-xl font-bold"
                        data-position="${op.position}" title="Delete this operation">×</button>
              </div>
            </div>
            <textarea name="locked_operations[${op.position}]" rows="3" autocomplete="off"
                      class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      placeholder="Enter operation text...">${op.operation_text}</textarea>
            ${op.specifications ? `
              <p class="mt-2 text-xs text-purple-600">
                <strong>Specifications:</strong> ${op.specifications}
              </p>
            ` : ''}
            <div class="flex flex-wrap gap-2 mt-2 text-xs text-gray-500">
              <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded">Type: ${op.process_type ? op.process_type.replace(/_/g, ' ') : 'Manual'}</span>
              ${op.target_thickness && op.target_thickness > 0 ? `<span class="bg-yellow-100 text-yellow-800 px-2 py-1 rounded">Target: ${op.target_thickness}μm</span>` : ''}
              ${op.auto_inserted ? '<span class="bg-gray-100 text-gray-800 px-2 py-1 rounded">Auto-inserted</span>' : ''}
            </div>
          </div>
        `;
      });

      // Add operation button at end
      html += `
        <div class="flex justify-center py-2">
          <button type="button" class="add-operation-btn bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-lg text-sm border border-blue-300 transition-colors"
                  data-insert-position="${operations.length + 1}">
            + Add Operation at End
          </button>
        </div>
      `;

      return html;
    }

    // Manual Mode Function
    window.switchToManualMode = function() {
      const treatmentsField = document.querySelector('[data-parts-form-target="treatmentsField"]');
      const treatments = treatmentsField ? JSON.parse(treatmentsField.value || '[]') : [];

      if (treatments.length === 0) {
        alert('Please configure some treatments first before switching to manual mode.');
        return;
      }

      const hasOperations = treatments.some(t => t.operation_id || t.type === 'stripping_only');
      if (!hasOperations) {
        alert('Please select operations for your treatments before switching to manual mode.');
        return;
      }

      if (confirm('Switch to manual editing mode? This will save your current configuration and allow you to customize each operation individually. You cannot return to automatic mode after this change.')) {
        document.getElementById('switch_to_manual_field').value = 'true';
        document.querySelector('form').submit();
      }
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', function() {
        initializeCustomerAutocomplete();
        initializeCopyFromPartAutocomplete();
      });
    } else {
      initializeCustomerAutocomplete();
      initializeCopyFromPartAutocomplete();
    }
    </script>
  <% end %>
<% end %>

<style>
.dropdown-item:hover {
  background-color: #dbeafe !important;
}

.border-green-500 {
  border-color: #10b981 !important;
  box-shadow: 0 0 0 1px #10b981 !important;
}

.border-red-500 {
  border-color: #ef4444 !important;
  box-shadow: 0 0 0 1px #ef4444 !important;
}
</style>
