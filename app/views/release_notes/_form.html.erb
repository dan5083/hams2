<%= form_with(model: @release_note.persisted? ? @release_note : [@works_order, @release_note], local: true) do |form| %>
  <% if @release_note.errors.any? %>
    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            There were <%= pluralize(@release_note.errors.count, "error") %> with your submission:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc list-inside">
              <% @release_note.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <!-- Invoice Warning for Editing Invoiced Release Notes -->
  <% if @release_note.invoiced? %>
    <div class="bg-amber-50 border border-amber-200 rounded-md p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-amber-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-amber-800">
            Invoiced Release Note
          </h3>
          <div class="mt-2 text-sm text-amber-700">
            <p><strong>Important:</strong> This release note has been invoiced
              (<%= link_to @release_note.invoice_item.invoice.display_name, @release_note.invoice_item.invoice,
                  class: "font-medium underline hover:no-underline" %>).
            </p>
            <ul class="mt-2 list-disc list-inside">
              <li><strong>Remarks:</strong> Can be updated freely - will appear in updated PDFs</li>
              <li><strong>Quantities:</strong> Can be updated for record accuracy, but <strong>will not affect the invoice amounts</strong></li>
              <li><strong>Other fields:</strong> Specification, customer details, etc. are pulled from the part/works order and will update automatically in PDFs</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow-sm rounded-lg">
    <div class="px-4 py-5 sm:p-6">
      <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

        <!-- Date Field -->
        <div class="sm:col-span-2">
          <%= form.label :date, class: "block text-sm font-medium text-gray-700" %>
          <%= form.date_field :date, class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
        </div>

        <!-- Quantity Accepted with Invoice Warning -->
        <div class="sm:col-span-2">
          <%= form.label :quantity_accepted, class: "block text-sm font-medium text-gray-700" %>
          <%= form.number_field :quantity_accepted,
                                min: 0,
                                max: @release_note.invoiced? ? nil : @works_order&.unreleased_quantity,
                                class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
          <% if @release_note.invoiced? %>
            <p class="mt-1 text-xs text-amber-600">
              <strong>Invoice Impact:</strong> Changes will not affect
              <%= link_to @release_note.invoice_item.invoice.display_name, @release_note.invoice_item.invoice,
                  class: "font-medium underline hover:no-underline" %>
              (Â£<%= sprintf("%.2f", @release_note.invoice_item.line_amount_inc_tax) %>)
            </p>
            <% if defined?(@original_quantity_accepted) && @original_quantity_accepted != @release_note.quantity_accepted %>
              <p class="mt-1 text-xs text-amber-600">
                Original invoiced quantity: <%= @original_quantity_accepted %>
              </p>
            <% end %>
          <% else %>
            <p class="mt-1 text-xs text-gray-500">
              Maximum: <%= @works_order&.unreleased_quantity || 0 %> (remaining unreleased)
            </p>
          <% end %>
        </div>

        <!-- Quantity Rejected with Invoice Warning -->
        <div class="sm:col-span-2">
          <%= form.label :quantity_rejected, class: "block text-sm font-medium text-gray-700" %>
          <%= form.number_field :quantity_rejected,
                                min: 0,
                                max: @release_note.invoiced? ? nil : @works_order&.unreleased_quantity,
                                class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
          <% if @release_note.invoiced? %>
            <p class="mt-1 text-xs text-amber-600">
              <strong>Note:</strong> Rejected quantity changes are for record keeping only
            </p>
            <% if defined?(@original_quantity_rejected) && @original_quantity_rejected != @release_note.quantity_rejected %>
              <p class="mt-1 text-xs text-amber-600">
                Original quantity: <%= @original_quantity_rejected %>
              </p>
            <% end %>
          <% end %>
        </div>

        <!-- Thickness Measurements Section (Conditional) - UPDATED FOR ELCOMETER -->
        <% if @release_note.requires_thickness_measurements? %>
          <div class="sm:col-span-6">
            <div class="border-t border-gray-200 pt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-4">
                Thickness Measurements
                <span class="text-sm font-normal text-gray-500">(Required for Aerospace/Defense)</span>
              </h3>

              <div class="space-y-6">
                <% @release_note.get_required_treatments.each do |treatment| %>
                  <%
                    treatment_id = treatment[:treatment_id]
                    display_name = treatment[:display_name]
                    target_thickness = treatment[:target_thickness]
                    existing_readings = @release_note.get_thickness_readings(treatment_id)
                    field_name = "thickness_measurement_#{treatment_id}"
                  %>

                  <!-- Elcometer Controller Wrapper -->
                  <div data-controller="elcometer"
                       data-elcometer-treatment-id-value="<%= treatment_id %>"
                       data-elcometer-process-type-value="<%= treatment[:process_type] %>"
                       data-elcometer-target-thickness-value="<%= target_thickness %>"
                       data-elcometer-display-name-value="<%= display_name %>"
                       class="border border-gray-200 rounded-lg p-4 bg-gray-50">

                    <!-- Treatment Header -->
                    <div class="flex items-center justify-between mb-4">
                      <div>
                        <label class="block text-sm font-medium text-gray-700">
                          <%= display_name %>
                          <span class="text-red-500">*</span>
                        </label>
                      </div>
                      <div class="flex gap-2">
                        <!-- Connect Button -->
                        <button type="button"
                                data-elcometer-target="connectButton"
                                data-action="click->elcometer#connectElcometer"
                                class="inline-flex items-center px-3 py-2 border border-blue-600 rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                          <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                          </svg>
                          Connect Elcometer
                        </button>

                        <!-- Stop Button (hidden initially) -->
                        <button type="button"
                                data-elcometer-target="stopButton"
                                data-action="click->elcometer#stopReading"
                                class="hidden inline-flex items-center px-3 py-2 border border-red-600 rounded-md shadow-sm text-sm font-medium text-red-600 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                          <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                          </svg>
                          Stop
                        </button>

                        <!-- Clear Button -->
                        <button type="button"
                                data-action="click->elcometer#clearReadings"
                                class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                          <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                          </svg>
                          Clear
                        </button>
                      </div>
                    </div>

                    <!-- Statistics Display -->
                    <div data-elcometer-target="statistics" class="mb-4"></div>

                    <!-- Readings Display -->
                    <div class="mb-4">
                      <label class="block text-xs font-medium text-gray-500 mb-2">Readings:</label>
                      <div data-elcometer-target="readingsList" class="min-h-[3rem] p-3 bg-white border border-gray-200 rounded-md">
                        <% if existing_readings.any? %>
                          <% existing_readings.each do |reading| %>
                            <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm mr-2 mb-2">
                              <%= reading %> Âµm
                            </span>
                          <% end %>
                        <% else %>
                          <span class="text-gray-400 text-sm">No readings yet...</span>
                        <% end %>
                      </div>
                    </div>

                    <!-- Manual Entry Options -->
                    <div class="space-y-3">
                      <!-- Single Reading Entry -->
                      <div>
                        <label class="block text-xs font-medium text-gray-500 mb-1">
                          Manual Entry:
                        </label>
                        <div class="flex gap-2">
                          <input type="number"
                                 step="0.1"
                                 min="0"
                                 placeholder="Enter reading (Âµm)"
                                 data-elcometer-target="manualReadingInput"
                                 data-action="keypress->elcometer#handleKeypress"
                                 class="flex-1 text-sm border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" />
                          <button type="button"
                                  data-action="click->elcometer#addManualReading"
                                  class="inline-flex items-center px-4 py-2 border border-blue-600 rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                            </svg>
                            Add Reading
                          </button>
                        </div>
                        <p class="mt-1 text-xs text-gray-500">Press Enter or click "Add Reading" to add a manual measurement</p>
                      </div>

                      <!-- Multiple Readings Entry -->
                      <details class="group">
                        <summary class="cursor-pointer text-xs font-medium text-blue-600 hover:text-blue-700 list-none flex items-center">
                          <svg class="h-4 w-4 mr-1 transition-transform group-open:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                          </svg>
                          Add multiple readings at once
                        </summary>
                        <div class="mt-2">
                          <p class="text-xs text-gray-500 mb-2">
                            Example: <code class="bg-gray-100 px-1 py-0.5 rounded">70.5, 70.7, 69.9</code> or <code class="bg-gray-100 px-1 py-0.5 rounded">70.5 70.7 69.9</code>
                          </p>
                          <input type="text"
                                 data-elcometer-target="bulkInput"
                                 data-action="blur->elcometer#addBulkReadings"
                                 class="block w-full text-sm border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
                                 placeholder="Type values separated by commas or spaces" />
                          <p class="mt-1 text-xs text-gray-500">
                            Values will be added when you click outside the field
                          </p>
                        </div>
                      </details>
                    </div>

                    <!-- Hidden field to store readings array for form submission -->
                    <%= hidden_field_tag "thickness_readings_#{treatment_id}",
                                        existing_readings.to_json,
                                        data: { elcometer_target: "readingsData" } %>
                  </div>
                <% end %>
              </div>

              <div class="mt-4 p-3 bg-blue-50 rounded-md">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-3 flex-1">
                    <p class="text-sm text-blue-700">
                      <strong>Elcometer 456:</strong>
                      Click "Connect Elcometer" and select your device. Each measurement will appear automatically.
                      <br>
                      <strong>Manual Entry:</strong>
                      Type a value and press Enter or click "Add Reading". Expand "Add multiple readings" to enter several at once.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>

        <!-- Statement (using remarks field) -->
        <div class="sm:col-span-6">
          <%= form.label :remarks, "Statement", class: "block text-sm font-medium text-gray-700" %>
          <%
            default_statement = ""
            if @release_note.new_record? && @release_note.remarks.blank?
              if @works_order.release_level&.statement
                default_statement = @works_order.release_level.statement
                if @works_order.specification.present?
                  default_statement = default_statement.gsub('[SPECIFICATION]', @works_order.specification)
                end
              end
            end

            field_value = @release_note.remarks.present? ? @release_note.remarks : default_statement
          %>
          <%= form.text_area :remarks, rows: 4,
                             value: field_value,
                             class: "mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
                             placeholder: "Enter the release statement for this release note..." %>
          <p class="mt-1 text-xs text-gray-500">
            Customize the release statement for this specific release note. The default comes from the release level template.
            <% if @release_note.invoiced? %>
              <span class="font-medium text-green-600">Changes will appear in updated PDFs.</span>
            <% end %>
          </p>
        </div>

        <!-- No Invoice Checkbox - Disabled if already invoiced -->
        <div class="sm:col-span-6">
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <%= form.check_box :no_invoice,
                                 disabled: @release_note.invoiced?,
                                 class: "focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded #{'bg-gray-100' if @release_note.invoiced?}" %>
            </div>
            <div class="ml-3 text-sm">
              <%= form.label :no_invoice, "Do not invoice this release",
                            class: "font-medium #{'text-gray-500' if @release_note.invoiced?} #{'text-gray-700' unless @release_note.invoiced?}" %>
              <% if @release_note.invoiced? %>
                <p class="text-gray-500">Cannot modify - this release note has already been invoiced</p>
              <% else %>
                <p class="text-gray-500">Check this if this release should not generate an invoice (e.g., reworks, samples)</p>
              <% end %>
            </div>
          </div>
        </div>

      </div>
    </div>

    <!-- Form Actions -->
    <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
      <%= link_to 'Cancel', @release_note.persisted? ? @release_note : @works_order,
                  class: "bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 mr-3" %>
      <%= form.submit (@release_note.persisted? ? "Update Release Note" : "Create Release Note"),
                      class: "inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
    </div>
  </div>

  <!-- JavaScript for handling thickness measurements submission -->
  <% if @release_note.requires_thickness_measurements? %>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');

        form.addEventListener('submit', function(e) {
          // Collect all thickness measurements from Elcometer controllers
          const measurements = [];

          // Find all thickness readings hidden fields
          const readingsFields = document.querySelectorAll('[name^="thickness_readings_"]');

          readingsFields.forEach(function(field) {
            // Extract treatment_id from field name: thickness_readings_abc123
            const treatmentId = field.name.replace('thickness_readings_', '');

            // Get the readings data (JSON array)
            let readings = [];
            try {
              readings = JSON.parse(field.value || '[]');
            } catch(e) {
              console.error('Error parsing readings:', e);
            }

            if (readings.length > 0) {
              // Get treatment info from the controller element
              const controller = field.closest('[data-controller="elcometer"]');
              const processType = controller.dataset.elcometerProcessTypeValue;
              const targetThickness = parseFloat(controller.dataset.elcometerTargetThicknessValue) || 0;
              const displayName = controller.dataset.elcometerDisplayNameValue;

              measurements.push({
                treatment_id: treatmentId,
                process_type: processType,
                target_thickness: targetThickness,
                display_name: displayName,
                readings: readings
              });
            }
          });

          // Add hidden field with JSON data for all measurements
          const hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = 'release_note[measured_thicknesses]';
          hiddenField.value = JSON.stringify({ measurements: measurements });
          form.appendChild(hiddenField);
        });
      });
    </script>
  <% end %>

<% end %>
