<%# app/views/part_processing_instructions/_form.html.erb %>
<%= form_with model: ppi, local: true, class: "space-y-6" do |form| %>
  <% if @part.present? %>
    <%= hidden_field_tag :part_id, @part.id %>
  <% end %>

  <% if ppi.errors.any? %>
    <div class="bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(ppi.errors.count, "error") %> prohibited this PPI from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc list-inside space-y-1">
              <% ppi.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Part</h3>

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      <!-- Customer Selection -->
      <div>
        <%= form.label :customer_id, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.select :customer_id,
            options_for_select([['Select Customer', '']] + @customers.map { |c| [c.name, c.id] }, ppi.customer_id),
            {},
            {
              class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm #{'bg-gray-100' if @part.present?}",
              required: true,
              disabled: ppi.persisted? || @part.present? # Can't change if editing or from specific part
            } %>
        <% if ppi.persisted? || @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Customer cannot be changed</p>
        <% end %>
      </div>

      <!-- Part Number -->
      <div>
        <%= form.label :part_number, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_number,
            value: ppi.part_number || @part&.uniform_part_number,
            placeholder: "Enter part number",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono #{'bg-gray-100' if @part.present?}",
            required: true,
            readonly: @part.present? %>
        <% if @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Pre-filled from selected part</p>
        <% else %>
          <p class="mt-1 text-xs text-gray-500">Will be automatically normalized</p>
        <% end %>
      </div>

      <!-- Part Issue -->
      <div>
        <%= form.label :part_issue, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_issue,
            value: ppi.part_issue || @part&.uniform_part_issue || 'A',
            placeholder: "A",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono #{'bg-gray-100' if @part.present?}",
            required: true,
            readonly: @part.present? %>
        <% if @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Pre-filled from selected part</p>
        <% end %>
      </div>

      <!-- Part Description -->
      <div>
        <%= form.label :part_description, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_description,
            value: ppi.part_description || (@part.present? ? "#{@part.uniform_part_number} component" : ""),
            placeholder: "Brief description of the part",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
      </div>

      <!-- Enabled Status (for editing) -->
      <% if ppi.persisted? %>
        <div>
          <%= form.label :enabled, class: "block text-sm font-medium text-gray-700 mb-1" %>
          <div class="mt-1">
            <%= form.check_box :enabled, class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-offset-0 focus:ring-blue-200 focus:ring-opacity-50" %>
            <%= form.label :enabled, "PPI is enabled", class: "ml-2 text-sm text-gray-900" %>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Main Treatment Selection -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Main Treatment Selection</h3>
    <p class="text-sm text-gray-600 mb-4">Select up to 3 treatments (in the order you wish them to appear in the operations)</p>

    <!-- Treatment Type Buttons -->
    <div class="flex space-x-4 mb-6">
      <button type="button" id="standard-btn" class="treatment-btn flex items-center justify-between px-4 py-2 border-2 border-gray-300 rounded-md hover:border-blue-500 transition-colors" data-treatment="standard_anodising">
        <span>Standard</span>
        <span class="count-badge ml-2 min-w-[24px] h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm font-medium">0</span>
      </button>

      <button type="button" id="hard-btn" class="treatment-btn flex items-center justify-between px-4 py-2 border-2 border-gray-300 rounded-md hover:border-blue-500 transition-colors" data-treatment="hard_anodising">
        <span>Hard</span>
        <span class="count-badge ml-2 min-w-[24px] h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm font-medium">0</span>
      </button>

      <button type="button" id="chromic-btn" class="treatment-btn flex items-center justify-between px-4 py-2 border-2 border-gray-300 rounded-md hover:border-blue-500 transition-colors" data-treatment="chromic_anodising">
        <span>Chromic</span>
        <span class="count-badge ml-2 min-w-[24px] h-6 bg-gray-100 rounded-full flex items-center justify-center text-sm font-medium">0</span>
      </button>
    </div>

    <!-- Dynamic Treatment Criteria -->
    <div id="treatment-criteria-container" class="space-y-6">
      <p class="text-gray-500 text-sm">Select treatment types above to configure criteria</p>
    </div>

    <!-- Available Operations -->
    <div class="mt-6">
      <h4 class="text-md font-medium text-gray-900 mb-3">Available Operations</h4>
      <div id="operations-container" class="space-y-2 max-h-60 overflow-y-auto border border-gray-200 rounded p-3">
        <p class="text-gray-500 text-sm">Select criteria above to see matching operations</p>
      </div>
    </div>

    <!-- Selected Operations -->
    <div class="mt-6">
      <h4 class="text-md font-medium text-gray-900 mb-3">Selected Operations (up to 3, in order)</h4>

      <!-- Live Process Preview -->
      <div class="mb-3 p-3 bg-blue-50 border border-blue-200 rounded-md">
        <div id="operations-preview" class="text-sm">
          <span class="text-gray-500">No operations selected</span>
        </div>
      </div>

      <div id="selected-container" class="space-y-2 min-h-[60px] border border-gray-200 rounded p-3 bg-gray-50">
        <% if ppi.selected_operations.any? %>
          <% ppi.selected_operations.each_with_index do |op_id, index| %>
            <% if operation = Operation.all_operations.find { |op| op.id == op_id } %>
              <div class="bg-blue-100 border border-blue-300 rounded px-3 py-2 flex justify-between items-center" data-operation-id="<%= op_id %>">
                <span class="text-sm"><strong><%= index + 1 %>.</strong> <%= operation.display_name %>: <%= operation.operation_text %></span>
                <button type="button" class="text-red-600 hover:text-red-800 ml-2 remove-operation">Ã—</button>
              </div>
            <% end %>
          <% end %>
        <% else %>
          <p class="text-gray-500 text-sm">No operations selected</p>
        <% end %>
      </div>
    </div>

    <!-- Hidden field for selected operations -->
    <%= hidden_field_tag "part_processing_instruction[customisation_data][operation_selection][selected_operations]",
        ppi.selected_operations.to_json,
        id: "selected_operations_field" %>
  </div>

  <!-- Specification (will be auto-generated from operations) -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Specification</h3>

    <%= form.text_area :specification,
        placeholder: "Will be automatically generated from selected operations...",
        rows: 4,
        class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50",
        readonly: true %>
    <p class="mt-1 text-xs text-gray-500">Auto-generated from selected operations</p>
  </div>

  <!-- Special Instructions (manual) -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Special Instructions</h3>

    <%= form.text_area :special_instructions,
        placeholder: "Any special handling or processing instructions...",
        rows: 3,
        class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
    <p class="mt-1 text-xs text-gray-500">Optional special instructions or notes</p>
  </div>

  <!-- Information Box -->
  <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
    <div class="flex">
      <div class="ml-3">
        <h3 class="text-sm font-medium text-blue-800">Operation-Based PPI Creation</h3>
        <div class="mt-2 text-sm text-blue-700">
          <p>Select your anodising criteria above and choose up to 3 operations in sequence. The specification will be automatically generated from your selections.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="flex justify-end space-x-3">
    <%= link_to "Cancel",
        ppi.persisted? ? ppi : (@part.present? ? @part : part_processing_instructions_path),
        class: "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded" %>
    <%= form.submit ppi.persisted? ? "Update PPI" : "Create PPI",
        class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
  </div>
<% end %>

<script>
document.addEventListener('turbo:load', function() {
  const selectedOperationsField = document.getElementById('selected_operations_field');
  const operationsContainer = document.getElementById('operations-container');
  const selectedContainer = document.getElementById('selected-container');
  const treatmentButtons = document.querySelectorAll('.treatment-btn');
  const treatmentCriteriaContainer = document.getElementById('treatment-criteria-container');

  let selectedOperations = [];
  let treatmentCounts = { standard_anodising: 0, hard_anodising: 0, chromic_anodising: 0 };
  let totalTreatments = 0;

  // Initialize with existing data
  try {
    const existingData = JSON.parse(selectedOperationsField.value || '[]');
    selectedOperations = existingData;
  } catch(e) {
    selectedOperations = [];
  }

  // Treatment button click handlers
  treatmentButtons.forEach(button => {
    button.addEventListener('click', function() {
      const treatment = this.dataset.treatment;
      const countBadge = this.querySelector('.count-badge');

      if (totalTreatments >= 3) {
        alert('Maximum 3 treatments allowed');
        return;
      }

      if (treatmentCounts[treatment] === 0) {
        treatmentCounts[treatment] = 1;
        totalTreatments++;

        // Update button appearance
        this.classList.remove('border-gray-300');
        this.classList.add('border-blue-500', 'bg-blue-50');
        countBadge.classList.remove('bg-gray-100');
        countBadge.classList.add('bg-blue-500', 'text-white');
        countBadge.textContent = '1';

        updateTreatmentCriteria();
      }
    });
  });

  function updateTreatmentCriteria() {
    const activeTreatments = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0);

    if (activeTreatments.length === 0) {
      treatmentCriteriaContainer.innerHTML = '<p class="text-gray-500 text-sm">Select treatment types above to configure criteria</p>';
      return;
    }

    treatmentCriteriaContainer.innerHTML = activeTreatments.map((treatment, index) => {
      const treatmentName = treatment.replace('_anodising', '').charAt(0).toUpperCase() + treatment.replace('_anodising', '').slice(1);

      return `
        <div class="border border-gray-200 rounded-lg p-4">
          <h4 class="font-medium text-gray-900 mb-3">${treatmentName} Treatment ${index + 1}</h4>
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <!-- Alloy -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Alloy</label>
              <select class="alloy-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select alloy...</option>
                <option value="6000_series">6000 Series</option>
                <option value="7075">7075</option>
                <option value="2014">2014</option>
                <option value="5083">5083</option>
                <option value="titanium">Titanium</option>
                <option value="general">General</option>
              </select>
            </div>

            <!-- Target Thickness -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Target Thickness (Î¼m)</label>
              <select class="thickness-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select thickness...</option>
                <option value="5">5Î¼m</option>
                <option value="10">10Î¼m</option>
                <option value="15">15Î¼m</option>
                <option value="20">20Î¼m</option>
                <option value="25">25Î¼m</option>
                <option value="30">30Î¼m</option>
                <option value="40">40Î¼m</option>
                <option value="50">50Î¼m</option>
                <option value="60">60Î¼m</option>
              </select>
            </div>

            <!-- Anodic Class -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Anodic Class</label>
              <select class="anodic-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select class...</option>
                <option value="class_1">Class 1 (Undyed)</option>
                <option value="class_2">Class 2 (Dyed)</option>
              </select>
            </div>
          </div>

          <!-- Operations for this treatment -->
          <div class="mt-4">
            <h5 class="text-sm font-medium text-gray-700 mb-2">Available Operations</h5>
            <div class="operations-list-${index} space-y-1 max-h-32 overflow-y-auto border border-gray-200 rounded p-2 bg-gray-50">
              <p class="text-gray-500 text-xs">Select criteria above to see operations</p>
            </div>
          </div>
        </div>
      `;
    }).join('');

    // Add event listeners to the new selects
    addSelectEventListeners();
  }

  function addSelectEventListeners() {
    const allSelects = treatmentCriteriaContainer.querySelectorAll('select');
    allSelects.forEach(select => {
      select.addEventListener('change', filterOperationsForTreatment);
    });
  }

  function filterOperationsForTreatment(event) {
    const select = event.target;
    const treatment = select.dataset.treatment;
    const treatmentIndex = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0).indexOf(treatment);
    const operationsList = document.querySelector(`.operations-list-${treatmentIndex}`);

    // Get all criteria for this treatment
    const alloySelect = treatmentCriteriaContainer.querySelector(`.alloy-select[data-treatment="${treatment}"]`);
    const thicknessSelect = treatmentCriteriaContainer.querySelector(`.thickness-select[data-treatment="${treatment}"]`);
    const anodicSelect = treatmentCriteriaContainer.querySelector(`.anodic-select[data-treatment="${treatment}"]`);

    const criteria = {
      anodising_types: [treatment],
      alloys: alloySelect.value ? [alloySelect.value] : [],
      target_thicknesses: thicknessSelect.value ? [parseFloat(thicknessSelect.value)] : [],
      anodic_classes: anodicSelect.value ? [anodicSelect.value] : []
    };

    // Only filter if we have some criteria
    if (!criteria.alloys.length && !criteria.target_thicknesses.length && !criteria.anodic_classes.length) {
      operationsList.innerHTML = '<p class="text-gray-500 text-xs">Select criteria above to see operations</p>';
      return;
    }

    // Make AJAX call to get filtered operations
    fetch('/operations/filter', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify(criteria)
    })
    .then(response => response.json())
    .then(operations => {
      displayOperationsForTreatment(operations, operationsList, treatment);
    })
    .catch(error => {
      console.error('Error filtering operations:', error);
      operationsList.innerHTML = '<p class="text-red-500 text-xs">Error loading operations</p>';
    });
  }

  function displayOperationsForTreatment(operations, container, treatment) {
    if (operations.length === 0) {
      container.innerHTML = '<p class="text-gray-500 text-xs">No matching operations found</p>';
      return;
    }

    container.innerHTML = operations.map(op => `
      <div class="bg-white border border-gray-200 rounded px-2 py-1 cursor-pointer hover:bg-gray-50 text-xs ${selectedOperations.includes(op.id) ? 'opacity-50' : ''}"
           data-operation-id="${op.id}" onclick="selectOperation('${op.id}', this)">
        <div class="flex justify-between items-center">
          <span class="font-medium">${op.display_name}</span>
          <button type="button" class="text-green-600 hover:text-green-800">+</button>
        </div>
        <p class="text-gray-600 mt-1">${op.operation_text}</p>
      </div>
    `).join('');
  }

  window.selectOperation = function(operationId, element) {
    if (selectedOperations.includes(operationId)) return;
    if (selectedOperations.length >= 3) {
      alert('Maximum 3 operations allowed');
      return;
    }

    selectedOperations.push(operationId);
    updateSelectedOperations();
    updateOperationsPreview();
    element.classList.add('opacity-50');
  };

  function updateSelectedOperations() {
    selectedOperationsField.value = JSON.stringify(selectedOperations);

    if (selectedOperations.length === 0) {
      selectedContainer.innerHTML = '<p class="text-gray-500 text-sm">No operations selected</p>';
      return;
    }

    // Get operation details and display
    fetch('/operations/details', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ operation_ids: selectedOperations })
    })
    .then(response => response.json())
    .then(operations => {
      selectedContainer.innerHTML = operations.map((op, index) => `
        <div class="bg-blue-100 border border-blue-300 rounded px-3 py-2 flex justify-between items-center" data-operation-id="${op.id}">
          <span class="text-sm"><strong>${index + 1}.</strong> ${op.display_name}: ${op.operation_text}</span>
          <button type="button" class="text-red-600 hover:text-red-800 ml-2 remove-operation" onclick="removeOperation('${op.id}')">Ã—</button>
        </div>
      `).join('');
    });
  }

  window.removeOperation = function(operationId) {
    selectedOperations = selectedOperations.filter(id => id !== operationId);
    updateSelectedOperations();
    updateOperationsPreview();
    // Refresh all operations lists to remove opacity
    document.querySelectorAll(`[data-operation-id="${operationId}"]`).forEach(el => {
      el.classList.remove('opacity-50');
    });
  };

  function updateOperationsPreview() {
    const previewElement = document.getElementById('operations-preview');

    if (selectedOperations.length === 0) {
      previewElement.innerHTML = '<span class="text-gray-500">No operations selected</span>';
      return;
    }

    // Make AJAX call to get live preview
    fetch('/operations/summary', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ operation_ids: selectedOperations })
    })
    .then(response => response.json())
    .then(data => {
      previewElement.innerHTML = `
        <div class="flex items-center space-x-2">
          <span class="font-medium text-blue-800">Process Flow:</span>
          <span class="text-blue-700">${data.summary}</span>
          <span class="text-xs text-blue-600">(${selectedOperations.length}/3 operations)</span>
        </div>
      `;
    })
    .catch(error => {
      console.error('Error updating preview:', error);
      previewElement.innerHTML = '<span class="text-red-500">Error loading preview</span>';
    });
  }

  // Initialize display
  updateSelectedOperations();
  updateOperationsPreview();
});
</script>
