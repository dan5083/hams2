<%# app/views/part_processing_instructions/_form.html.erb %>
<%= form_with model: ppi, local: true, class: "space-y-6" do |form| %>
  <% if @part.present? %>
    <%= hidden_field_tag :part_id, @part.id %>
  <% end %>

  <% if ppi.errors.any? %>
    <div class="bg-red-50 border border-red-200 rounded-md p-4">
      <div class="flex">
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">
            <%= pluralize(ppi.errors.count, "error") %> prohibited this PPI from being saved:
          </h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc list-inside space-y-1">
              <% ppi.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Part</h3>

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      <!-- Customer Selection -->
      <div>
        <%= form.label :customer_id, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.select :customer_id,
            options_for_select([['Select Customer', '']] + @customers.map { |c| [c.name, c.id] }, ppi.customer_id),
            {},
            {
              class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm #{'bg-gray-100' if @part.present?}",
              required: true,
              disabled: ppi.persisted? || @part.present? # Can't change if editing or from specific part
            } %>
        <% if ppi.persisted? || @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Customer cannot be changed</p>
        <% end %>
      </div>

      <!-- Part Number -->
      <div>
        <%= form.label :part_number, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_number,
            value: ppi.part_number || @part&.uniform_part_number,
            placeholder: "Enter part number",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono #{'bg-gray-100' if @part.present?}",
            required: true,
            readonly: @part.present? %>
        <% if @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Pre-filled from selected part</p>
        <% else %>
          <p class="mt-1 text-xs text-gray-500">Will be automatically normalized</p>
        <% end %>
      </div>

      <!-- Part Issue -->
      <div>
        <%= form.label :part_issue, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_issue,
            value: ppi.part_issue || @part&.uniform_part_issue || 'A',
            placeholder: "A",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm font-mono #{'bg-gray-100' if @part.present?}",
            required: true,
            readonly: @part.present? %>
        <% if @part.present? %>
          <p class="mt-1 text-xs text-gray-500">Pre-filled from selected part</p>
        <% end %>
      </div>

      <!-- Part Description -->
      <div>
        <%= form.label :part_description, class: "block text-sm font-medium text-gray-700 mb-1" %>
        <%= form.text_field :part_description,
            value: ppi.part_description || (@part.present? ? "#{@part.uniform_part_number} component" : ""),
            placeholder: "Brief description of the part",
            class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
      </div>

      <!-- Enabled Status (for editing) -->
      <% if ppi.persisted? %>
        <div>
          <%= form.label :enabled, class: "block text-sm font-medium text-gray-700 mb-1" %>
          <div class="mt-1">
            <%= form.check_box :enabled, class: "rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-offset-0 focus:ring-blue-200 focus:ring-opacity-50" %>
            <%= form.label :enabled, "PPI is enabled", class: "ml-2 text-sm text-gray-900" %>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <!-- Main Treatment Selection -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Treatment Selection</h3>
    <p class="text-sm text-gray-600 mb-4">Select up to 3 treatments (in the order you wish them to appear in the operations)</p>

    <!-- Treatment Type Buttons -->
    <div class="grid grid-cols-2 gap-3 mb-6 sm:grid-cols-5">
      <button type="button" id="standard-btn" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-blue-500 transition-colors text-sm" data-treatment="standard_anodising">
        <span>Standard</span>
        <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
      </button>

      <button type="button" id="hard-btn" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-purple-500 transition-colors text-sm" data-treatment="hard_anodising">
        <span>Hard</span>
        <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
      </button>

      <button type="button" id="chromic-btn" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-green-500 transition-colors text-sm" data-treatment="chromic_anodising">
        <span>Chromic</span>
        <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
      </button>

      <button type="button" id="chemical-btn" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-orange-500 transition-colors text-sm" data-treatment="chemical_conversion">
        <span>Chemical Conv.</span>
        <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
      </button>

      <button type="button" id="enp-btn" class="treatment-btn flex items-center justify-between px-3 py-2 border-2 border-gray-300 rounded-md hover:border-indigo-500 transition-colors text-sm" data-treatment="electroless_nickel_plating">
        <span>ENP</span>
        <span class="count-badge ml-2 min-w-[20px] h-5 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium">0</span>
      </button>
    </div>

    <!-- Dynamic Treatment Criteria -->
    <div id="treatment-criteria-container" class="space-y-6">
      <p class="text-gray-500 text-sm">Select treatment types above to configure criteria</p>
    </div>

    <!-- Available Operations -->
    <div class="mt-6">
      <h4 class="text-md font-medium text-gray-900 mb-3">Available Operations</h4>
      <div id="operations-container" class="space-y-2 max-h-60 overflow-y-auto border border-gray-200 rounded p-3">
        <p class="text-gray-500 text-sm">Select criteria above to see matching operations</p>
      </div>
    </div>

    <!-- Selected Treatments -->
    <div class="mt-6">
      <h4 class="text-md font-medium text-gray-900 mb-3">Selected Treatments (up to 3, in order)</h4>

      <div id="selected-container" class="space-y-2 min-h-[60px] border border-gray-200 rounded p-3 bg-gray-50">
        <% operations_with_auto_ops = ppi.respond_to?(:get_operations_with_auto_ops) ? ppi.get_operations_with_auto_ops : [] %>
        <% if operations_with_auto_ops.any? %>
          <% operations_with_auto_ops.each_with_index do |operation, index| %>
            <% if operation %>
              <% is_auto_inserted = operation.respond_to?(:auto_inserted?) && operation.auto_inserted? %>
              <div class="<%= is_auto_inserted ? 'bg-gray-100 border border-gray-300' : 'bg-blue-100 border border-blue-300' %> rounded px-3 py-2 flex justify-between items-center" data-operation-id="<%= operation.id %>">
                <span class="text-sm <%= 'italic text-gray-600' if is_auto_inserted %>">
                  <strong><%= index + 1 %>.</strong>
                  <%= operation.display_name %>: <%= operation.operation_text %>
                  <% if is_auto_inserted %>
                    <span class="text-xs text-gray-500 ml-2">(auto-inserted)</span>
                  <% end %>
                </span>
                <% unless is_auto_inserted %>
                  <button type="button" class="text-red-600 hover:text-red-800 ml-2 remove-operation" data-operation-id="<%= operation.id %>">Ã—</button>
                <% end %>
              </div>
            <% end %>
          <% end %>
        <% else %>
          <p class="text-gray-500 text-sm">No treatments selected</p>
        <% end %>
      </div>
    </div>

    <!-- Hidden field for selected operations -->
    <%= hidden_field_tag "part_processing_instruction[customisation_data][operation_selection][selected_operations]",
        ppi.selected_operations.to_json,
        id: "selected_operations_field" %>
  </div>

  <!-- Specification (will be auto-generated from operations) -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Specification</h3>

    <%= form.text_area :specification,
        placeholder: "Will be automatically generated from selected operations...",
        rows: 4,
        class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm bg-gray-50",
        readonly: true %>
    <p class="mt-1 text-xs text-gray-500">Auto-generated from selected operations</p>
  </div>

  <!-- Special Instructions (manual) -->
  <div class="bg-white shadow rounded-lg p-6">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Special Instructions</h3>

    <%= form.text_area :special_instructions,
        placeholder: "Any special handling or processing instructions...",
        rows: 3,
        class: "mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" %>
    <p class="mt-1 text-xs text-gray-500">Optional special instructions or notes</p>
  </div>

  <!-- Information Box -->
  <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
    <div class="flex">
      <div class="ml-3">
        <h3 class="text-sm font-medium text-blue-800">Operation-Based PPI Creation</h3>
        <div class="mt-2 text-sm text-blue-700">
          <p>Select your treatment criteria above and choose up to 3 operations in sequence. Auto-operations (like rinses) are automatically inserted between chemical processes. Supports anodising, chemical conversion, ENP, and other surface treatments. The specification will be automatically generated from your selections.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Form Actions -->
  <div class="flex justify-end space-x-3">
    <%= link_to "Cancel",
        ppi.persisted? ? ppi : (@part.present? ? @part : part_processing_instructions_path),
        class: "bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded" %>
    <%= form.submit ppi.persisted? ? "Update PPI" : "Create PPI",
        class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
  </div>
<% end %>

<script>
document.addEventListener('turbo:load', function() {
  const selectedOperationsField = document.getElementById('selected_operations_field');
  const operationsContainer = document.getElementById('operations-container');
  const selectedContainer = document.getElementById('selected-container');
  const treatmentButtons = document.querySelectorAll('.treatment-btn');
  const treatmentCriteriaContainer = document.getElementById('treatment-criteria-container');

  let selectedOperations = [];
  let treatmentCounts = {
    standard_anodising: 0,
    hard_anodising: 0,
    chromic_anodising: 0,
    chemical_conversion: 0,
    electroless_nickel_plating: 0
  };
  let totalTreatments = 0;

  // Initialize with existing data
  try {
    const existingData = JSON.parse(selectedOperationsField.value || '[]');
    selectedOperations = existingData;
  } catch(e) {
    selectedOperations = [];
  }

  // Treatment button click handlers
  treatmentButtons.forEach(button => {
    button.addEventListener('click', function() {
      const treatment = this.dataset.treatment;
      const countBadge = this.querySelector('.count-badge');

      if (totalTreatments >= 3) {
        alert('Maximum 3 treatments allowed');
        return;
      }

      if (treatmentCounts[treatment] === 0) {
        treatmentCounts[treatment] = 1;
        totalTreatments++;

        // Update button appearance with treatment-specific colors
        this.classList.remove('border-gray-300');
        const colors = {
          'standard_anodising': ['border-blue-500', 'bg-blue-50', 'bg-blue-500'],
          'hard_anodising': ['border-purple-500', 'bg-purple-50', 'bg-purple-500'],
          'chromic_anodising': ['border-green-500', 'bg-green-50', 'bg-green-500'],
          'chemical_conversion': ['border-orange-500', 'bg-orange-50', 'bg-orange-500'],
          'electroless_nickel_plating': ['border-indigo-500', 'bg-indigo-50', 'bg-indigo-500']
        };

        this.classList.add(colors[treatment][0], colors[treatment][1]);
        countBadge.classList.remove('bg-gray-100');
        countBadge.classList.add(colors[treatment][2], 'text-white');
        countBadge.textContent = '1';

        updateTreatmentCriteria();
      }
    });
  });

  function updateTreatmentCriteria() {
    const activeTreatments = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0);

    if (activeTreatments.length === 0) {
      treatmentCriteriaContainer.innerHTML = '<p class="text-gray-500 text-sm">Select treatment types above to configure criteria</p>';
      return;
    }

    treatmentCriteriaContainer.innerHTML = activeTreatments.map((treatment, index) => {
      const treatmentName = treatment.replace('_anodising', '').replace('_conversion', '').replace('_nickel_plating', '').charAt(0).toUpperCase() + treatment.replace('_anodising', '').replace('_conversion', '').replace('_nickel_plating', '').slice(1);

      // Chemical conversion doesn't need alloy/thickness selection
      if (treatment === 'chemical_conversion') {
        return `
          <div class="border border-orange-200 rounded-lg p-4 bg-orange-50">
            <h4 class="font-medium text-gray-900 mb-3">${treatmentName} Treatment ${index + 1}</h4>
            <p class="text-sm text-gray-600 mb-3">Chemical conversion operations will be available below - no additional criteria needed.</p>

            <!-- Operations for this treatment -->
            <div class="mt-4">
              <h5 class="text-sm font-medium text-gray-700 mb-2">Available Operations</h5>
              <div class="operations-list-${index} space-y-1 max-h-32 overflow-y-auto border border-gray-200 rounded p-2 bg-white">
                <p class="text-gray-500 text-xs">Loading chemical conversion operations...</p>
              </div>
            </div>
          </div>
        `;
      }

      // ENP treatment with specific criteria
      if (treatment === 'electroless_nickel_plating') {
        return `
          <div class="border border-indigo-200 rounded-lg p-4 bg-indigo-50">
            <h4 class="font-medium text-gray-900 mb-3">${treatmentName} Treatment ${index + 1}</h4>
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
              <!-- Alloy -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Alloy/Material</label>
                <select class="alloy-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" data-treatment="${treatment}">
                  <option value="">Select material...</option>
                  <option value="steel">Steel</option>
                  <option value="stainless_steel">Stainless Steel</option>
                  <option value="316_stainless_steel">316 Stainless Steel</option>
                  <option value="aluminium">Aluminium</option>
                  <option value="copper">Copper</option>
                  <option value="brass">Brass</option>
                  <option value="2000_series_alloys">2000 Series Alloys</option>
                  <option value="cast_aluminium_william_cope">Cast Aluminium (William Cope)</option>
                  <option value="mclaren_sta142_procedure_d">McLaren STA142 Procedure D</option>
                </select>
              </div>

              <!-- ENP Type -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">ENP Type</label>
                <select class="enp-type-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" data-treatment="${treatment}">
                  <option value="">Select ENP type...</option>
                  <option value="high_phosphorous">High Phosphorous</option>
                  <option value="medium_phosphorous">Medium Phosphorous</option>
                  <option value="low_phosphorous">Low Phosphorous</option>
                  <option value="ptfe_composite">PTFE Composite</option>
                </select>
              </div>

              <!-- Target Thickness (for time calculation) -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Target Thickness (Î¼m)</label>
                <input type="number"
                       class="thickness-input mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                       data-treatment="${treatment}"
                       placeholder="e.g., 25"
                       min="1"
                       max="100">
                <p class="text-xs text-gray-500 mt-1">Used for time calculation</p>
              </div>
            </div>

            <!-- Operations for this treatment -->
            <div class="mt-4">
              <h5 class="text-sm font-medium text-gray-700 mb-2">Available Operations</h5>
              <div class="operations-list-${index} space-y-1 max-h-32 overflow-y-auto border border-gray-200 rounded p-2 bg-white">
                <p class="text-gray-500 text-xs">Select criteria above to see ENP operations</p>
              </div>
            </div>

            <!-- Plating Time Estimate -->
            <div class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded">
              <h6 class="text-sm font-medium text-blue-800 mb-1">Plating Time Estimate</h6>
              <div class="plating-time-estimate text-sm text-blue-700">
                Enter thickness above to see time estimate
              </div>
            </div>
          </div>
        `;
      }

      // Standard anodising treatments
      return `
        <div class="border border-gray-200 rounded-lg p-4">
          <h4 class="font-medium text-gray-900 mb-3">${treatmentName} Treatment ${index + 1}</h4>
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <!-- Alloy -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Alloy</label>
              <select class="alloy-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select alloy...</option>
                <option value="6000_series">6000 Series</option>
                <option value="7075">7075</option>
                <option value="2014">2014</option>
                <option value="5083">5083</option>
                <option value="titanium">Titanium</option>
                <option value="general">General</option>
              </select>
            </div>

            <!-- Target Thickness -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Target Thickness (Î¼m)</label>
              <select class="thickness-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select thickness...</option>
                <option value="5">5Î¼m</option>
                <option value="10">10Î¼m</option>
                <option value="15">15Î¼m</option>
                <option value="20">20Î¼m</option>
                <option value="25">25Î¼m</option>
                <option value="30">30Î¼m</option>
                <option value="40">40Î¼m</option>
                <option value="50">50Î¼m</option>
                <option value="60">60Î¼m</option>
              </select>
            </div>

            <!-- Anodic Class -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Anodic Class</label>
              <select class="anodic-select mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" data-treatment="${treatment}">
                <option value="">Select class...</option>
                <option value="class_1">Class 1 (Undyed)</option>
                <option value="class_2">Class 2 (Dyed)</option>
              </select>
            </div>
          </div>

          <!-- Operations for this treatment -->
          <div class="mt-4">
            <h5 class="text-sm font-medium text-gray-700 mb-2">Available Operations</h5>
            <div class="operations-list-${index} space-y-1 max-h-32 overflow-y-auto border border-gray-200 rounded p-2 bg-gray-50">
              <p class="text-gray-500 text-xs">Select criteria above to see operations</p>
            </div>
          </div>
        </div>
      `;
    }).join('');

    // Add event listeners to the new selects and load operations for special treatments
    addSelectEventListeners();
    loadChemicalConversionOperations();
    loadENPOperations();
    calculatePlatingTime();
  }

  function addSelectEventListeners() {
    const allSelects = treatmentCriteriaContainer.querySelectorAll('select');
    const allInputs = treatmentCriteriaContainer.querySelectorAll('input');

    allSelects.forEach(select => {
      select.addEventListener('change', filterOperationsForTreatment);
    });

    allInputs.forEach(input => {
      input.addEventListener('input', function(event) {
        if (event.target.classList.contains('thickness-input')) {
          calculatePlatingTime();
        }
        filterOperationsForTreatment(event);
      });
    });
  }

  function calculatePlatingTime() {
    const activeTreatments = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0);
    const enpIndex = activeTreatments.indexOf('electroless_nickel_plating');

    if (enpIndex !== -1) {
      const thicknessInput = treatmentCriteriaContainer.querySelector('.thickness-input[data-treatment="electroless_nickel_plating"]');
      const enpTypeSelect = treatmentCriteriaContainer.querySelector('.enp-type-select[data-treatment="electroless_nickel_plating"]');
      const timeEstimateDiv = treatmentCriteriaContainer.querySelector('.plating-time-estimate');

      if (thicknessInput && timeEstimateDiv && enpTypeSelect) {
        const thickness = parseFloat(thicknessInput.value);
        const enpType = enpTypeSelect.value;

        if (thickness && thickness > 0 && enpType) {
          // Calculate based on ENP type using realistic deposition rates
          let minRate, maxRate, typeName;

          switch(enpType) {
            case 'high_phosphorous':
              minRate = 12.0;
              maxRate = 14.1;
              typeName = 'High Phos (Vandalloy 4100)';
              break;
            case 'medium_phosphorous':
              minRate = 13.3;
              maxRate = 17.1;
              typeName = 'Medium Phos (Nicklad 767)';
              break;
            case 'low_phosphorous':
              minRate = 6.8;
              maxRate = 18.2;
              typeName = 'Low Phos (Nicklad ELV 824)';
              break;
            case 'ptfe_composite':
              minRate = 5.0;
              maxRate = 11.0;
              typeName = 'PTFE Composite (Nicklad Ice)';
              break;
            default:
              minRate = 12.0;
              maxRate = 15.0;
              typeName = 'General ENP';
          }

          const minTimeHours = thickness / maxRate;
          const maxTimeHours = thickness / minRate;
          const avgTimeHours = (minTimeHours + maxTimeHours) / 2;

          const formatTime = (hours) => {
            if (hours < 1) {
              return `${Math.round(hours * 60)} min`;
            } else if (hours < 2) {
              const h = Math.floor(hours);
              const m = Math.round((hours - h) * 60);
              return `${h}h ${m}m`;
            } else {
              return `${hours.toFixed(1)}h`;
            }
          };

          timeEstimateDiv.innerHTML = `
            <div class="space-y-1">
              <div><strong>${typeName}</strong></div>
              <div>Time range: <strong>${formatTime(minTimeHours)} - ${formatTime(maxTimeHours)}</strong></div>
              <div>Average: <strong>${formatTime(avgTimeHours)}</strong></div>
              <div class="text-xs text-blue-600">Rate: ${minRate}-${maxRate} Î¼m/hour at 82-91Â°C</div>
            </div>
          `;
        } else if (thickness && thickness > 0) {
          timeEstimateDiv.innerHTML = 'Select ENP type above for accurate time estimate';
        } else {
          timeEstimateDiv.innerHTML = 'Enter thickness and select ENP type for time estimate';
        }
      }
    }
  }

  function loadChemicalConversionOperations() {
    const activeTreatments = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0);
    const chemicalIndex = activeTreatments.indexOf('chemical_conversion');

    if (chemicalIndex !== -1) {
      const operationsList = document.querySelector(`.operations-list-${chemicalIndex}`);

      // Fetch all chemical conversion operations
      fetch('/operations/filter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ anodising_types: ['chemical_conversion'] })
      })
      .then(response => response.json())
      .then(operations => {
        displayOperationsForTreatment(operations, operationsList, 'chemical_conversion');
      })
      .catch(error => {
        console.error('Error loading chemical conversion operations:', error);
        operationsList.innerHTML = '<p class="text-red-500 text-xs">Error loading operations</p>';
      });
    }
  }

  function loadENPOperations() {
    const activeTreatments = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0);
    const enpIndex = activeTreatments.indexOf('electroless_nickel_plating');

    if (enpIndex !== -1) {
      const operationsList = document.querySelector(`.operations-list-${enpIndex}`);

      // Fetch all ENP operations
      fetch('/operations/filter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ anodising_types: ['electroless_nickel_plating'] })
      })
      .then(response => response.json())
      .then(operations => {
        displayOperationsForTreatment(operations, operationsList, 'electroless_nickel_plating');
      })
      .catch(error => {
        console.error('Error loading ENP operations:', error);
        operationsList.innerHTML = '<p class="text-red-500 text-xs">Error loading operations</p>';
      });
    }
  }

  function filterOperationsForTreatment(event) {
    const select = event.target;
    const treatment = select.dataset.treatment;
    const treatmentIndex = Object.keys(treatmentCounts).filter(t => treatmentCounts[t] > 0).indexOf(treatment);
    const operationsList = document.querySelector(`.operations-list-${treatmentIndex}`);

    // Skip filtering for chemical conversion (already loaded)
    if (treatment === 'chemical_conversion') return;

    // For ENP, handle different criteria
    if (treatment === 'electroless_nickel_plating') {
      const alloySelect = treatmentCriteriaContainer.querySelector(`.alloy-select[data-treatment="${treatment}"]`);
      const enpTypeSelect = treatmentCriteriaContainer.querySelector(`.enp-type-select[data-treatment="${treatment}"]`);
      const thicknessInput = treatmentCriteriaContainer.querySelector(`.thickness-input[data-treatment="${treatment}"]`);

      const criteria = {
        anodising_types: [treatment],
        alloys: alloySelect && alloySelect.value ? [alloySelect.value] : [],
        enp_types: enpTypeSelect && enpTypeSelect.value ? [enpTypeSelect.value] : [],
        target_thicknesses: thicknessInput && thicknessInput.value ? [parseFloat(thicknessInput.value)] : []
      };

      // Only filter if we have some criteria
      if (!criteria.alloys.length && !criteria.enp_types.length && !criteria.target_thicknesses.length) {
        // Still show all ENP operations if no criteria selected
        loadENPOperations();
        return;
      }

      // Make AJAX call to get filtered operations
      fetch('/operations/filter', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify(criteria)
      })
      .then(response => response.json())
      .then(operations => {
        displayOperationsForTreatment(operations, operationsList, treatment);
      })
      .catch(error => {
        console.error('Error filtering ENP operations:', error);
        operationsList.innerHTML = '<p class="text-red-500 text-xs">Error loading operations</p>';
      });
      return;
    }

    // Standard anodising treatments
    const alloySelect = treatmentCriteriaContainer.querySelector(`.alloy-select[data-treatment="${treatment}"]`);
    const thicknessSelect = treatmentCriteriaContainer.querySelector(`.thickness-select[data-treatment="${treatment}"]`);
    const anodicSelect = treatmentCriteriaContainer.querySelector(`.anodic-select[data-treatment="${treatment}"]`);

    const criteria = {
      anodising_types: [treatment],
      alloys: alloySelect.value ? [alloySelect.value] : [],
      target_thicknesses: thicknessSelect.value ? [parseFloat(thicknessSelect.value)] : [],
      anodic_classes: anodicSelect.value ? [anodicSelect.value] : []
    };

    // Only filter if we have some criteria
    if (!criteria.alloys.length && !criteria.target_thicknesses.length && !criteria.anodic_classes.length) {
      operationsList.innerHTML = '<p class="text-gray-500 text-xs">Select criteria above to see operations</p>';
      return;
    }

    // Make AJAX call to get filtered operations
    fetch('/operations/filter', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify(criteria)
    })
    .then(response => response.json())
    .then(operations => {
      displayOperationsForTreatment(operations, operationsList, treatment);
    })
    .catch(error => {
      console.error('Error filtering operations:', error);
      operationsList.innerHTML = '<p class="text-red-500 text-xs">Error loading operations</p>';
    });
  }

  function displayOperationsForTreatment(operations, container, treatment) {
    if (operations.length === 0) {
      container.innerHTML = '<p class="text-gray-500 text-xs">No matching operations found</p>';
      return;
    }

    container.innerHTML = operations.map(op => {
      const displayText = (treatment === 'chemical_conversion' || treatment === 'electroless_nickel_plating') ?
        op.id.replace(/_/g, ' ') : op.display_name;
      return `
        <div class="bg-white border border-gray-200 rounded px-2 py-1 cursor-pointer hover:bg-gray-50 text-xs ${selectedOperations.includes(op.id) ? 'opacity-50' : ''}"
             data-operation-id="${op.id}" onclick="selectOperation('${op.id}', this)">
          <div class="flex justify-between items-center">
            <span class="font-medium">${displayText}</span>
            <button type="button" class="text-green-600 hover:text-green-800">+</button>
          </div>
          <p class="text-gray-600 mt-1">${op.operation_text}</p>
          ${op.specifications ? `<p class="text-purple-600 text-xs mt-1">${op.specifications}</p>` : ''}
        </div>
      `;
    }).join('');
  }

  window.selectOperation = function(operationId, element) {
    if (selectedOperations.includes(operationId)) return;
    if (selectedOperations.length >= 3) {
      alert('Maximum 3 operations allowed');
      return;
    }

    selectedOperations.push(operationId);
    updateSelectedOperations();
    element.classList.add('opacity-50');
  };

  function updateSelectedOperations() {
    selectedOperationsField.value = JSON.stringify(selectedOperations);

    if (selectedOperations.length === 0) {
      selectedContainer.innerHTML = '<p class="text-gray-500 text-sm">No treatments selected</p>';
      return;
    }

    // Get operation details with auto-ops and display
    fetch('/operations/preview_with_auto_ops', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ operation_ids: selectedOperations })
    })
    .then(response => response.json())
    .then(data => {
      const operations = data.operations || [];
      selectedContainer.innerHTML = operations.map((op, index) => {
        const isAutoInserted = op.auto_inserted;
        const bgColor = isAutoInserted ? 'bg-gray-100 border border-gray-300' : 'bg-blue-100 border border-blue-300';
        const textColor = isAutoInserted ? 'italic text-gray-600' : 'text-gray-900';
        const autoLabel = isAutoInserted ? '<span class="text-xs text-gray-500 ml-2">(auto-inserted)</span>' : '';
        const removeButton = isAutoInserted ? '' : `<button type="button" class="text-red-600 hover:text-red-800 ml-2 remove-operation" onclick="removeOperation('${op.id}')">Ã—</button>`;

        return `
          <div class="${bgColor} rounded px-3 py-2 flex justify-between items-center" data-operation-id="${op.id}">
            <span class="text-sm ${textColor}">
              <strong>${index + 1}.</strong>
              ${op.display_name}: ${op.operation_text}
              ${autoLabel}
            </span>
            ${removeButton}
          </div>
        `;
      }).join('');
    })
    .catch(error => {
      console.error('Error loading operations with auto-ops:', error);
      // Fallback to basic display
      fetch('/operations/details', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({ operation_ids: selectedOperations })
      })
      .then(response => response.json())
      .then(operations => {
        selectedContainer.innerHTML = operations.map((op, index) => `
          <div class="bg-blue-100 border border-blue-300 rounded px-3 py-2 flex justify-between items-center" data-operation-id="${op.id}">
            <span class="text-sm"><strong>${index + 1}.</strong> ${op.display_name || op.id.replace(/_/g, ' ')}: ${op.operation_text}</span>
            <button type="button" class="text-red-600 hover:text-red-800 ml-2 remove-operation" onclick="removeOperation('${op.id}')">Ã—</button>
          </div>
        `).join('');
      });
    });
  }

  window.removeOperation = function(operationId) {
    selectedOperations = selectedOperations.filter(id => id !== operationId);
    updateSelectedOperations();
    // Refresh all operations lists to remove opacity
    document.querySelectorAll(`[data-operation-id="${operationId}"]`).forEach(el => {
      el.classList.remove('opacity-50');
    });
  };

  // Initialize display
  updateSelectedOperations();
});
</script>
